from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import aiohttp
import pytz
import asyncio
import dotenv
import os
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.client.default import DefaultBotProperties

dotenv.load_dotenv()

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserState(StatesGroup):
    waiting_for_location = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_locations = {}

def get_main_keyboard() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É —Å–µ–π—á–∞—Å")],
        [KeyboardButton(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_location_keyboard() -> ReplyKeyboardMarkup:
    buttons = [[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
        "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /setlocation –®–ò–†–û–¢–ê –î–û–õ–ì–û–¢–ê\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /setlocation 55.7558 37.6173 (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã)",
        reply_markup=get_location_keyboard()
    )
    await state.set_state(UserState.waiting_for_location)

@dp.message(lambda message: message.text and message.text.startswith('/setlocation'))
async def handle_location_command(message: types.Message):
    try:
        _, lat, lon = message.text.split()
        lat, lon = float(lat), float(lon)
        user_locations[message.from_user.id] = {
            'lat': lat,
            'lon': lon
        }
        await message.answer(
            "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00.",
            reply_markup=get_main_keyboard()
        )
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlocation <—à–∏—Ä–æ—Ç–∞> <–¥–æ–ª–≥–æ—Ç–∞>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /setlocation 55.7558 37.6173"
        )

@dp.message(UserState.waiting_for_location, F.location)
async def handle_location(message: types.Message, state: FSMContext):
    try:
        user_locations[message.from_user.id] = {
            'lat': message.location.latitude,
            'lon': message.location.longitude
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É API —Å—Ä–∞–∑—É
        weather = await get_current_weather(
            message.location.latitude,
            message.location.longitude
        )
        
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00.\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É —Å—Ä–∞–∑—É
        await message.answer(
            f"üå§ <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:</b>\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
            f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['feels_like']}¬∞C\n"
            f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {weather['description']}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_location_keyboard()
        )

@dp.message(F.location)
async def handle_new_location(message: types.Message):
    user_locations[message.from_user.id] = {
        'lat': message.location.latitude,
        'lon': message.location.longitude
    }
    await message.answer("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())

async def get_current_weather(lat: float, lon: float) -> dict:
    try:
        async with aiohttp.ClientSession() as session:
            params = {
                'lat': lat,
                'lon': lon,
                'appid': WEATHER_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenWeather API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
            
            async with session.get("http://api.openweathermap.org/data/2.5/weather", params=params) as response:
                if response.status != 200:
                    error_data = await response.text()
                    print(f"OpenWeather API error: Status {response.status}")
                    print(f"Error details: {error_data}")
                    print(f"API Key used: {WEATHER_API_KEY}")
                    raise Exception(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}: {error_data}")
                
                data = await response.json()
                print(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {data}")
                
                return {
                    'temp': round(data['main']['temp']),
                    'description': data['weather'][0]['description'],
                    'humidity': data['main']['humidity'],
                    'feels_like': round(data['main']['feels_like'])
                }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        raise

async def get_weather_forecast(lat: float, lon: float) -> dict:
    async with aiohttp.ClientSession() as session:
        params = {
            'lat': lat,
            'lon': lon,
            'appid': WEATHER_API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        async with session.get("http://api.openweathermap.org/data/2.5/forecast", params=params) as response:
            data = await response.json()
            tomorrow = datetime.now().date()
            for item in data['list']:
                forecast_date = datetime.fromtimestamp(item['dt']).date()
                if forecast_date > tomorrow:
                    return {
                        'temp': round(item['main']['temp']),
                        'description': item['weather'][0]['description'],
                        'humidity': item['main']['humidity']
                    }

@dp.message(F.text == "üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É —Å–µ–π—á–∞—Å")
async def get_current_weather_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_locations:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=get_main_keyboard()
        )
        return

    try:
        weather = await get_current_weather(
            user_locations[user_id]['lat'],
            user_locations[user_id]['lon']
        )
        await message.answer(
            f"üå§ <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:</b>\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
            f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['feels_like']}¬∞C\n"
            f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {weather['description']}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%"
        )
    except Exception as e:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_weather_notifications():
    for user_id, location in user_locations.items():
        try:
            weather = await get_weather_forecast(location['lat'], location['lon'])
            message = (
                f"üå§ <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
                f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {weather['description']}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%"
            )
            await bot.send_message(user_id, message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def main():
    scheduler.add_job(
        send_weather_notifications,
        trigger='cron',
        hour=19,
        minute=0,
        timezone=pytz.timezone('Europe/Moscow')
    )
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 